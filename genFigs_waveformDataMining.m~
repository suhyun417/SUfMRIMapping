

%% Set the directory
ss = pwd;
if ~isempty(strfind(ss, 'Volume')) % if it's local
    dirProjects = '/Volumes/PROJECTS';
    dirProcdata = '/Volumes/PROCDATA';
    dirLibrary = '/Volumes/LIBRARY';
else % on virtual machine
    dirProjects = '/projects';
    dirProcdata = '/procdata';
    dirLibrary = '/library';
end

nameSubject = 'Spi';
dirDataNeural = fullfile(dirProcdata, '/parksh', nameSubject);

setMovIDs = [1 2 3];

%% Idnetify available units
d_n = dir(fullfile(dirDataNeural, '*sig*.mat'));
[listMatSUFile{1:length(d_n), 1}] = deal(d_n.name);

% list of channel IDs and movie IDs of each file
listSU_all = regexp(cat(2,d_n.name), '(?<=sig)\w*', 'match')'; % list of channels
listMov_all = regexp(cat(2,d_n.name), '\d*(?=sig)', 'match')'; % list of movies

% Since not every channel has data for every movie, 
% the "data presence matrix (Channels x MovieIDs)" is generated here
% for which channel has which movie's data: 1 for data, 0 for no data
listSUchannelID = unique(listSU_all);

indDataMov=[];
for iCh=1:length(listSUchannelID) % go throucgh channel-by-channel     
     tempListMov{iCh} = regexp([listMatSUFile{strcmp(listSUchannelID{iCh}, listSU_all)}], '\d*(?=sig)', 'match');
     % Get indices for common movies across cells
     indDataMov(iCh, :) = ismember(setMovIDs, str2num(char(tempListMov{iCh}))'); % data presence matrix (Channels x MovieIDs) 
end

%% Load the waveform and characterize one by one 
for iChan = 1:length(listSUchannelID)
  
  cur_cellID = listSUchannelID{iChan};
  indCurChan = find(strcmp(cur_cellID, listSUchannelID)>0);
  
  for iMov = 1:length(setMovIDs)
      cur_movID = setMovIDs(iMov);
      if ~indDataMov(indCurChan, iMov), 
          fprintf(1, 'cell: %s, movie: %d, data: %d \n', cur_cellID, cur_movID, indDataMov(indCurChan, iMov))
          fprintf(1, 'Skip to the next movie/cell \n')
          continue; 
      end
      
      % Find a relevant file
      filename = char(listMatSUFile((strcmp(cur_cellID, listSU_all)+strcmp(num2str(cur_movID), listMov_all))==2));
      fprintf(1, 'cell: %s, movie: %d, data: %d \n', cur_cellID, cur_movID, indDataMov(indCurChan, iMov))
      fprintf(1, 'filename: %s\n', filename)
      
      load(fullfile(dirDataNeural, filename))
  
      for iTrial = 1:length(dat.waveform)
          
          wf = nanmean(dat.waveform{iTrial}');
          [p2t, xaxis, yy] = getWaveformPeakToTrough(wf);
          %         figure(30);
          %         plot(xaxis, yy); hold on
          
          unitchar(iChan, iMov).matWaveP2T(iTrial, 1) = p2t;
          unitchar(iChan, iMov).fitWaveResult(iTrial,1).xaxis_microsec = xaxis;
          unitchar(iChan, iMov).fitWaveResult(iTrial,1).splineWaveform = yy;
      end
  end
end

% 
% %   count = 0;
%   for iMov = 1:length(setMovIDs) % should concatenate all those movies in order
%       
%       cur_movID = setMovIDs(iMov);
%       
%       if ~indDataMov(indCurChan, iMov), 
%           fprintf(1, 'cell: %s, movie: %d, data: %d \n', cur_cellID, cur_movID, indDataMov(indCurChan, iMov))
%           fprintf(1, 'Skip to the next movie/cell \n')
%           continue; 
%       end
%       
%       % Find a relevant file
%       filename = char(listMatSUFile((strcmp(cur_cellID, listSU_all)+strcmp(num2str(cur_movID), listMov_all))==2));
%       fprintf(1, 'cell: %s, movie: %d, data: %d \n', cur_cellID, cur_movID, indDataMov(indCurChan, iMov))
%       fprintf(1, 'filename: %s\n', filename)
% 
%       FR_dT(iChan, iMov).cellID = cur_cellID;
%       FR_dT(iChan, iMov).movID = cur_movID;
%       FR_dT(iChan, iMov).SUfilename = filename;
%       [FR_dT(iChan, iMov).matFR{1}, FR_dT(iChan, iMov).mnFR] = computeMeanFR(dirDataNeural, filename, sizeTimeBin_sec); % averaged SDF across trials
% 
% %       [S(iChan, iMov).matsdf{1}, S(iChan, iMov).mnsdf] = computeMeanSDF(dirDataNeural, filename); % averaged SDF across trials
% %       [S(iChan, iMov).rgrsMION, S(iChan, iMov).rgrsMION_resample] = computeMIONrgrs(SDF_dT(iChan, iMov).mnsdf, timeResNeural_sec, fMRI_TR_sec);
% 
%       
%   end


[p2t, xaxis, yy] = getWaveformPeakToTrough(wf) 